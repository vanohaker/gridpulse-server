// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package codegen

import (
	"github.com/gofiber/fiber/v2"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AcessDenied defines model for AcessDenied.
type AcessDenied struct {
	Data Data `json:"data"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Data Data `json:"data"`
}

// LoginSucess defines model for LoginSucess.
type LoginSucess struct {
	Data UserAuthData `json:"data"`
}

// RegisterNewUser defines model for RegisterNewUser.
type RegisterNewUser struct {
	Accept   bool   `json:"accept"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// RegisterNewUserSucess defines model for RegisterNewUserSucess.
type RegisterNewUserSucess struct {
	Data UserAuthData `json:"data"`
}

// SucessRefreshToken defines model for SucessRefreshToken.
type SucessRefreshToken struct {
	Data Data `json:"data"`
}

// UserAuthData defines model for UserAuthData.
type UserAuthData struct {
	Acesstoken   string   `json:"acesstoken"`
	Refreshtoken string   `json:"refreshtoken"`
	Userdata     UserData `json:"userdata"`
}

// UserData defines model for UserData.
type UserData struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

// UserNotFound defines model for UserNotFound.
type UserNotFound struct {
	Data Data `json:"data"`
}

// Data defines model for data.
type Data struct {
	Msg string `json:"msg"`
}

// DeviceAdd defines model for deviceAdd.
type DeviceAdd struct {
	Uuid string `json:"uuid"`
}

// LivenesProbe defines model for livenesProbe.
type LivenesProbe struct {
	Data struct {
		Postgres string `json:"postgres"`
		Redis    string `json:"redis"`
	} `json:"data"`
}

// DeviceAddV1JSONBody defines parameters for DeviceAddV1.
type DeviceAddV1JSONBody struct {
	Name string  `json:"name"`
	Type *string `json:"type,omitempty"`
}

// AddOauthProviderV1JSONBody defines parameters for AddOauthProviderV1.
type AddOauthProviderV1JSONBody = map[string]interface{}

// LoginUserV1JSONBody defines parameters for LoginUserV1.
type LoginUserV1JSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// RefreshAcessTokenV1JSONBody defines parameters for RefreshAcessTokenV1.
type RefreshAcessTokenV1JSONBody struct {
	Data struct {
		Refreshtoken string `json:"refreshtoken"`
	} `json:"data"`
}

// DeviceAddV1JSONRequestBody defines body for DeviceAddV1 for application/json ContentType.
type DeviceAddV1JSONRequestBody DeviceAddV1JSONBody

// AddOauthProviderV1JSONRequestBody defines body for AddOauthProviderV1 for application/json ContentType.
type AddOauthProviderV1JSONRequestBody = AddOauthProviderV1JSONBody

// LoginUserV1JSONRequestBody defines body for LoginUserV1 for application/json ContentType.
type LoginUserV1JSONRequestBody LoginUserV1JSONBody

// RefreshAcessTokenV1JSONRequestBody defines body for RefreshAcessTokenV1 for application/json ContentType.
type RefreshAcessTokenV1JSONRequestBody RefreshAcessTokenV1JSONBody

// UserRegisterV1JSONRequestBody defines body for UserRegisterV1 for application/json ContentType.
type UserRegisterV1JSONRequestBody = RegisterNewUser

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Livenes Probe
	// (GET /livenes)
	Livenesprobe(c *fiber.Ctx) error
	// Add device
	// (POST /v1/devices/add)
	DeviceAddV1(c *fiber.Ctx) error
	// Add oauth provider
	// (POST /v1/oauth/add)
	AddOauthProviderV1(c *fiber.Ctx) error
	// Login user
	// (POST /v1/user/login)
	LoginUserV1(c *fiber.Ctx) error
	// Refresh acesstoken
	// (POST /v1/user/refrashtoken)
	RefreshAcessTokenV1(c *fiber.Ctx) error
	// Register new user
	// (POST /v1/user/register)
	UserRegisterV1(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Livenesprobe operation middleware
func (siw *ServerInterfaceWrapper) Livenesprobe(c *fiber.Ctx) error {

	return siw.Handler.Livenesprobe(c)
}

// DeviceAddV1 operation middleware
func (siw *ServerInterfaceWrapper) DeviceAddV1(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeviceAddV1(c)
}

// AddOauthProviderV1 operation middleware
func (siw *ServerInterfaceWrapper) AddOauthProviderV1(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.AddOauthProviderV1(c)
}

// LoginUserV1 operation middleware
func (siw *ServerInterfaceWrapper) LoginUserV1(c *fiber.Ctx) error {

	return siw.Handler.LoginUserV1(c)
}

// RefreshAcessTokenV1 operation middleware
func (siw *ServerInterfaceWrapper) RefreshAcessTokenV1(c *fiber.Ctx) error {

	return siw.Handler.RefreshAcessTokenV1(c)
}

// UserRegisterV1 operation middleware
func (siw *ServerInterfaceWrapper) UserRegisterV1(c *fiber.Ctx) error {

	return siw.Handler.UserRegisterV1(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/livenes", wrapper.Livenesprobe)

	router.Post(options.BaseURL+"/v1/devices/add", wrapper.DeviceAddV1)

	router.Post(options.BaseURL+"/v1/oauth/add", wrapper.AddOauthProviderV1)

	router.Post(options.BaseURL+"/v1/user/login", wrapper.LoginUserV1)

	router.Post(options.BaseURL+"/v1/user/refrashtoken", wrapper.RefreshAcessTokenV1)

	router.Post(options.BaseURL+"/v1/user/register", wrapper.UserRegisterV1)

}
