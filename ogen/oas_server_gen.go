// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddOAuthProviderV1 implements Add_Oauth_Provider_V1 operation.
	//
	// Add oauth provider.
	//
	// POST /v1/oauth/add
	AddOAuthProviderV1(ctx context.Context, req *AddOAuthProviderV1Req) (*AddOAuthProviderV1Forbidden, error)
	// DeviceAddV1 implements Device_Add_V1 operation.
	//
	// Add device.
	//
	// POST /v1/devices/add
	DeviceAddV1(ctx context.Context, req *DeviceAddV1Req) (*DeviceAddStatusCode, error)
	// Livenesprobe implements Livenesprobe operation.
	//
	// Livenes Probe.
	//
	// GET /livenes
	Livenesprobe(ctx context.Context) (*LivenesProbeStatusCode, error)
	// LoginUserV1 implements Login_User_V1 operation.
	//
	// Login user.
	//
	// POST /v1/user/login
	LoginUserV1(ctx context.Context, req *LoginUserV1Req) (LoginUserV1Res, error)
	// RefreshAcessTokenV1 implements Refresh_AcessToken_V1 operation.
	//
	// Refresh acesstoken.
	//
	// POST /v1/user/refrashtoken
	RefreshAcessTokenV1(ctx context.Context, req *RefreshAcessTokenV1Req) (*SucessRefreshToken, error)
	// UserRegisterV1 implements User_Register_V1 operation.
	//
	// Register new user.
	//
	// POST /v1/user/register
	UserRegisterV1(ctx context.Context, req *RegisterNewUser) (UserRegisterV1Res, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
