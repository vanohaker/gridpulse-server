// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// V1OAuthLoginParams is parameters of v1_Oauth_Login operation.
type V1OAuthLoginParams struct {
	Provider OptString
}

func unpackV1OAuthLoginParams(packed middleware.Parameters) (params V1OAuthLoginParams) {
	{
		key := middleware.ParameterKey{
			Name: "provider",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Provider = v.(OptString)
		}
	}
	return params
}

func decodeV1OAuthLoginParams(args [0]string, argsEscaped bool, r *http.Request) (params V1OAuthLoginParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: provider.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "provider",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProviderVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotProviderVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Provider.SetTo(paramsDotProviderVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "provider",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
